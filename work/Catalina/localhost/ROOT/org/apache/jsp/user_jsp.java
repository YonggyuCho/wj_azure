/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.24
 * Generated at: 2025-02-04 04:19:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.naming.*;
import javax.sql.DataSource;

public final class user_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.naming");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.sql.DataSource");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Tomcat1 User Management</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    ");

    Connection conn = null;
    Statement stmt = null;
    ResultSet rs = null;

    try {
        // MySQL ì°ê²°
        Context initContext = new InitialContext();
        Context envContext  = (Context)initContext.lookup("java:/comp/env");
        DataSource ds = (DataSource)envContext.lookup("jdbc/mysql");
        conn = ds.getConnection();

        boolean isUpdated = false; // ë°ì´í°ê° ë³ê²½ëìëì§ íì¸íë íëê·¸

        // INSERT ê¸°ë¥ ì²ë¦¬ (ì¤ë³µ ë°©ì§ ë° ë¦¬ëë í¸ ì¶ê°)
        if ("POST".equalsIgnoreCase(request.getMethod()) && request.getParameter("insert") != null) {
            String name = request.getParameter("name");
            String email = request.getParameter("email");

            if (name != null && email != null && !name.isEmpty() && !email.isEmpty()) {
                // ì¤ë³µ ê²ì¬
                String checkSql = "SELECT COUNT(*) FROM users WHERE email = ?";
                PreparedStatement checkStmt = conn.prepareStatement(checkSql);
                checkStmt.setString(1, email);
                ResultSet checkRs = checkStmt.executeQuery();
                checkRs.next();
                int count = checkRs.getInt(1);
                checkRs.close();
                checkStmt.close();

                if (count > 0) {
                    out.println("<p>â ï¸ This email is already registered: " + email + "</p>");
                } else {
                    String insertSql = "INSERT INTO users (name, email) VALUES (?, ?)";
                    PreparedStatement insertStmt = conn.prepareStatement(insertSql);
                    insertStmt.setString(1, name);
                    insertStmt.setString(2, email);
                    insertStmt.executeUpdate();
                    insertStmt.close();

                    isUpdated = true; // ë³ê²½ ë°ì
                }
            } else {
                out.println("<p>â ï¸ Please fill in all fields.</p>");
            }
        }

        // DELETE ê¸°ë¥ ì²ë¦¬ (ì´ë©ì¼ì ê¸°ì¤ì¼ë¡ ì­ì  + ë¦¬ëë í¸ ì¶ê°)
        if ("POST".equalsIgnoreCase(request.getMethod()) && request.getParameter("delete") != null) {
            String email = request.getParameter("email");

            if (email != null && !email.isEmpty()) {
                String sql = "DELETE FROM users WHERE email = ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, email);
                int rows = pstmt.executeUpdate();
                pstmt.close();

                if (rows > 0) {
                    isUpdated = true; // ë³ê²½ ë°ì
                } else {
                    out.println("<p>â ï¸ User with email " + email + " not found.</p>");
                }
            } else {
                out.println("<p>â ï¸ Please enter a valid email.</p>");
            }
        }

        // ë³ê²½ì´ ë°ìíë¤ë©´ ë¦¬ëë í¸íì¬ ì¤ë³µ ì¤í ë°©ì§
        if (isUpdated) {
            response.sendRedirect("user.jsp"); // ê°ì íì´ì§ë¡ ë¦¬ëë í¸íì¬ ì¤ë³µ ì¤í ë°©ì§
        }

        // SELECT ê¸°ë¥ ì²ë¦¬ (ë°ì´í° ì¡°í)
        stmt = conn.createStatement();
        rs = stmt.executeQuery("SELECT * FROM users");
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <h2>Tomcat1 User List</h2>\r\n");
      out.write("    <table border=\"1\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>Name</th>\r\n");
      out.write("            <th>Email</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");

        while (rs.next()) { 
            out.println("<tr>");
            out.println("<td>" + rs.getString("name") + "</td>");
            out.println("<td>" + rs.getString("email") + "</td>");
            out.println("</tr>");
        }
        
      out.write("\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("    <br>\r\n");
      out.write("\r\n");
      out.write("    <!-- ì¬ì©ì ì¶ê° í¼ -->\r\n");
      out.write("    <h3>Add User</h3>\r\n");
      out.write("    <form action=\"user.jsp\" method=\"post\">\r\n");
      out.write("        Name: <input type=\"text\" name=\"name\" required><br>\r\n");
      out.write("        Email: <input type=\"email\" name=\"email\" required><br>\r\n");
      out.write("        <button type=\"submit\" name=\"insert\">Insert User</button>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    <br>\r\n");
      out.write("\r\n");
      out.write("    <!-- ì¬ì©ì ì­ì  í¼ (ì´ë©ì¼ì ê¸°ì¤ì¼ë¡ ì­ì ) -->\r\n");
      out.write("    <h3>Delete User</h3>\r\n");
      out.write("    <form action=\"user.jsp\" method=\"post\">\r\n");
      out.write("        Email: <input type=\"email\" name=\"email\" required><br>\r\n");
      out.write("        <button type=\"submit\" name=\"delete\">Delete User</button>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    <br>\r\n");
      out.write("    <button onclick=\"location.reload();\">Refresh</button>\r\n");
      out.write("\r\n");
      out.write("    ");

    // ìì ì ë¦¬ (close)
    if (rs != null) rs.close();
    if (stmt != null) stmt.close();
    if (conn != null) conn.close();
    } catch (Exception e) {
        out.println("<p>â ï¸ MySQL Connection Fail: " + e.getMessage() + "</p>");
    }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
